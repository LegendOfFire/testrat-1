#!/usr/bin/env perl
# vim:ft=perl

use strict;
use warnings;
use File::Basename;
use DateTime;
use JSON;
use DBI;

sub load_config;
sub fetch_node_info;
sub update_database;

my $scriptDir = dirname($0);
my $cmdFilename = "$scriptDir/nodechecker.cmd";
my $cfgFilename = "$scriptDir/nodechecker.cfg";
my $cfg = load_config($cfgFilename);
my $ni = {};
my $niParsers = {
  cell => sub {
    my ($cni, $ctx, $line) = @_;
    if ($line =~ /^.*\((?<admState>[^\)]+)\).*\((?<opState>[^\)]+)\)\s*(?<ldn>[^\s]+)\s*$/) {
      defined($cni->{cell}) or $cni->{cell} = {};
      $cni->{cell}->{$+{ldn}} = {
        admState => $+{admState},
        opState => $+{opState},
      };
    }
  },
  alarm => sub {
    my ($cni, $ctx, $line) = @_;
    if ($line =~ /^Sever\s+(Specific).*(MO)/) {
      $ctx->{position} = {
        severity => [0,     $-[1]],
        problem  => [$-[1], $-[2] - $-[1]],
        mo       => [$-[2], undef],
      };
    } elsif ($line =~ /^M.*\)\s*$/) {
      defined($cni->{alarm}) or $cni->{alarm} = [];
      my $alm = {};
      while (my ($k, $v) = each(%{$ctx->{position}})) {
        my $s;
        defined($v->[1])
          and $s = substr $line, $v->[0], $v->[1]
          or  $s = substr $line, $v->[0];
        $s =~ s/^\s+|\s+$//g;
        $alm->{$k} = $s;
      }
      push @{$cni->{alarm}}, $alm;
    }
  },
  board => sub {
    my ($cni, $ctx, $line) = @_;
    if (defined($ctx->{table})) {
      if ($line =~ /^\s*\-+\s*$/) {
        $ctx->{table} = undef;
      } elsif ($ctx->{table} == 1) {
        $line =~ s/^\s+|\s+$//g;
        my @f = split /\s+/, $line;
        if (scalar(@f) > 9) {
          $cni->{board}->{$f[9]} = {
            serial => $f[9],
            board => $f[2],
            date => $f[10],
            led => {
              fault => $f[3],
              oper => $f[4],
              maint => $f[5],
            },
          };
        }
      } elsif ($ctx->{table} == 2) {
        $line =~ s/^\s+|\s+$//g;
        my @f = split /\s+/, $line;
        if (scalar(@f) > 10) {
          $cni->{board}->{$f[9]} = {
            serial => $f[9],
            board => $f[3],
            date => $f[10],
            led => {
              fault => $f[4],
              oper => $f[5],
              maint => $f[6],
            },
          };
        }
      } elsif ($ctx->{table} == 3) {
        $line =~ s/^\s+|\s+$//g;
        my @f = split /\s+/, $line;
        if (scalar(@f) > 11) {
          $cni->{board}->{$f[10]} = {
            serial => $f[10],
            board => $f[2],
            date => $f[11],
            led => {
              fault => $f[4],
              oper => $f[5],
              maint => $f[6],
            },
          };
        }
      }
    } elsif ($line =~ /^SMN\s+APN\s+BOARD\s+FAULT/) {
      $ctx->{table} = 1;
    } elsif ($line =~ /^SMN\s+APN\s+PORT\s+BOARD\s+FAULT/) {
      $ctx->{table} = 2;
    } elsif ($line =~ /^FRU\s+LNH\s+BOARD\s+ST\s+FAULT/) {
      $ctx->{table} = 3;
    }
  },
};

for my $ip (@ARGV) {
  my $cni = fetch_node_info($ip);
  defined($cni) and $ni->{$ip} = $cni;
}
print to_json($ni, {pretty => 1});
update_database($ni);

sub load_config {
  my $fn = shift;

  open my $f, "<$fn" or die "Couldn't open '$fn':$!";
  local $/;
  my $s = <$f>;
  close $f;

  my $cfg = from_json($s);
  return $cfg;
}

sub fetch_node_info {
  my ($ip) = @_;
  print STDERR "Fetching $ip ...\n";
  my $cni = {
    ip => $ip,
  };
  open(my $p, "ssh eyinyin\@$cfg->{proxy_server} /app/moshell/latest/moshell/moshell $ip <$cmdFilename|")
    or warn "Couldn't open pipe: $!";
  my $parserId = undef;
  my $parser = undef;
  my $ctx = undef;
  while (my $line = <$p>) {
    chomp $line;
    if (defined($parserId)) {
      if ($line =~ /end:$parserId/) {
        $parserId = undef;
        $parser = undef;
        $ctx = undef;
      } else {
        $parser->($cni, $ctx, $line);
      }
    } else {
      while (my ($id, $p) = each(%$niParsers)) {
        if ($line =~ /begin:$id/) {
          $parserId = $id;
          $parser = $p;
          $ctx = {};
          last;
        }
      }
    }
  }
  close $p;
  $cni->{datetime} = DateTime->now . "";
  return $cni;
}

sub update_database {
  my $ni = shift;

  my $dbh = DBI->connect("dbi:SQLite:dbname=$cfg->{database}", "", "");

  my $cleanEnb = $dbh->prepare(q{
    DELETE FROM console_enodeb
    WHERE enbId=?;
    });
  my $insertEnb = $dbh->prepare(q{
    INSERT OR REPLACE INTO console_enodeb(enbId, oamIp)
    VALUES(?, ?);
    });
  my $selectEnbByIp = $dbh->prepare(q{
    SELECT enbId FROM console_enodeb
    WHERE oamIp=?;
    });
  my $selectEnb = $dbh->prepare(q{
    SELECT id FROM console_enodeb
    WHERE enbId=?;
    });

  my $cleanCell = $dbh->prepare(q{
    DELETE FROM console_cell
    WHERE ownEnb_id=(SELECT id FROM console_enodeb WHERE enbId=?);
    });
  my $insertCell = $dbh->prepare(q{
    INSERT OR REPLACE INTO console_cell(cellId, admState, ownEnb_id, opState)
    VALUES(?, ?, ?, ?);
    });

  my $cleanBoard = $dbh->prepare(q{
    DELETE FROM console_board
    WHERE ownEnb_id=(SELECT id FROM console_enodeb WHERE enbId=?);
    });
  my $insertBoard = $dbh->prepare(q{
    INSERT OR REPLACE INTO console_board(maintLED, faultLED, boardType, ownEnb_id, operLED)
    VALUES(?, ?, ?, ?, ?);
    });

  my $cleanAlarm = $dbh->prepare(q{
    DELETE FROM console_alarm
    WHERE ownEnb_id=(SELECT id FROM console_enodeb WHERE enbId=?);
    });
  my $insertAlarm = $dbh->prepare(q{
    INSERT OR REPLACE INTO console_alarm(severity, problem, description, ownEnb_id)
    VALUES(?, ?, ?, ?);
    });

  $dbh->begin_work;
  while (my ($ip, $n) = each(%$ni)) {
    # Get eNodeB ID
    $selectEnbByIp->execute($ip) or die $selectEnbByIp->errstr;
    my ($enbId) = $selectEnbByIp->fetchrow_array();
    $selectEnbByIp->finish();

    # Cleanup tables
    $cleanCell->execute($enbId) or die $cleanCell->errstr;
    $cleanBoard->execute($enbId) or die $cleanBoard->errstr;
    $cleanAlarm->execute($enbId) or die $cleanAlarm->errstr;

    # Populate eNodeB
    $insertEnb->execute($enbId, $ip) or die $insertEnb->errstr;
    $selectEnb->execute($enbId) or die $selectEnb->errstr;
    my ($enbUID) = $selectEnb->fetchrow_array();
    $selectEnb->finish();

    # Populate cell
    while (my ($k, $v) = each(%{$n->{cell}})) {
      $k =~ s/^.*,//g; # Only need last part of a cell LDN
      $insertCell->execute($k, $v->{admState}, $enbUID, $v->{opState})
        or die $insertCell->errstr;
    }

    # Populate board
    while (my ($k, $v) = each(%{$n->{board}})) {
      $insertBoard->execute($v->{led}->{maint}, $v->{led}->{fault}, $v->{board}, $enbUID, $v->{led}->{oper})
        or die $insertBoard->errstr;
    }

    # Populate alarm
    for my $alarm (@{$n->{alarm}}) {
      $insertAlarm->execute($alarm->{severity}, $alarm->{problem}, $alarm->{mo}, $enbUID)
        or die $insertBoard->errstr;
    }
  }
  $dbh->commit;
  $dbh->disconnect;
}
